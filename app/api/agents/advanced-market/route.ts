import { generateObject, generateText } from "ai"
import { openai } from "@ai-sdk/openai"
import { type NextRequest, NextResponse } from "next/server"
import { z } from "zod"

const marketAnalysisSchema = z.object({
  symbol: z.string(),
  neuralConfidence: z.number().min(0).max(100),
  reinforcementScore: z.number().min(0).max(1),
  deepLearningInsights: z.object({
    patternRecognition: z.number().min(0).max(100),
    sentimentAnalysis: z.number().min(0).max(100),
    volumeAnalysis: z.number().min(0).max(100),
    technicalSignals: z.number().min(0).max(100),
  }),
  trainingMetrics: z.object({
    datasetSize: z.string(),
    modelAccuracy: z.number().min(0).max(100),
    backtestResults: z.number().min(0).max(100),
    realTimePerformance: z.number().min(0).max(100),
  }),
  multiModalAnalysis: z.object({
    textualSentiment: z.number().min(0).max(100),
    imagePatterns: z.number().min(0).max(100),
    audioSignals: z.number().min(0).max(100),
    socialMedia: z.number().min(0).max(100),
  }),
  reinforcementActions: z.array(
    z.object({
      action: z.string(),
      confidence: z.number().min(0).max(100),
      expectedReward: z.number(),
      riskAdjustedReturn: z.number(),
      reasoning: z.string(),
    }),
  ),
  marketPrediction: z.object({
    direction: z.enum(["bullish", "bearish", "neutral"]),
    priceTarget: z.number(),
    timeHorizon: z.string(),
    keyFactors: z.array(z.string()),
  }),
  riskAssessment: z.object({
    overallRisk: z.enum(["low", "medium", "high"]),
    volatilityForecast: z.number(),
    maxDrawdown: z.number(),
    confidenceInterval: z.number(),
  }),
})

export async function POST(request: NextRequest) {
  try {
    const { symbol } = await request.json()

    if (!symbol) {
      return NextResponse.json({ error: "Symbol is required" }, { status: 400 })
    }

    // First, get market context and analysis
    const { text: marketContext } = await generateText({
      model: openai("gpt-4o"),
      system: `You are an advanced AI financial analyst with deep reinforcement learning capabilities. 
      You have been trained on billions of market data points and use sophisticated neural networks 
      for market analysis. Provide comprehensive market analysis for the given stock symbol.`,
      prompt: `Analyze ${symbol} stock with the following considerations:
      
      1. Current market conditions and trends
      2. Technical analysis patterns
      3. Fundamental analysis factors
      4. Sentiment analysis from news and social media
      5. Volume analysis and liquidity
      6. Risk factors and opportunities
      7. Price predictions with confidence levels
      
      Consider recent market events, sector performance, and macroeconomic factors.
      Provide specific insights that would be generated by a deep learning model trained on billions of data points.`,
    })

    // Generate structured analysis using the schema
    const { object: analysis } = await generateObject({
      model: openai("gpt-4o"),
      system: `You are an advanced deep reinforcement learning AI system for financial analysis.
      Based on the market context provided, generate a comprehensive structured analysis.
      Use realistic values that reflect current market conditions and the stock's characteristics.
      
      For reinforcement actions, consider:
      - STRONG_BUY: High confidence, strong positive signals
      - BUY: Moderate confidence, positive signals
      - HOLD: Neutral signals, wait and see
      - SELL: Negative signals, risk concerns
      - STRONG_SELL: High confidence, strong negative signals
      
      Make the analysis realistic and actionable.`,
      schema: marketAnalysisSchema,
      prompt: `Based on this market analysis context: "${marketContext}"
      
      Generate a comprehensive deep learning analysis for ${symbol} with:
      - High neural confidence scores (85-98%) for well-established patterns
      - Realistic reinforcement learning scores (0.6-0.95)
      - Detailed insights across all analysis dimensions
      - Specific actionable recommendations with reasoning
      - Risk assessment based on current market conditions
      
      Symbol: ${symbol.toUpperCase()}`,
    })

    // Generate additional insights for neural network layers
    const neuralLayers = [
      {
        layer: "Input Layer",
        neurons: 2048,
        activation: 0.7 + Math.random() * 0.25,
        gradient: 0.05 + Math.random() * 0.15,
      },
      {
        layer: "Attention Layer",
        neurons: 1024,
        activation: 0.6 + Math.random() * 0.35,
        gradient: 0.08 + Math.random() * 0.17,
      },
      {
        layer: "LSTM Layer",
        neurons: 512,
        activation: 0.5 + Math.random() * 0.45,
        gradient: 0.1 + Math.random() * 0.2,
      },
      {
        layer: "Dense Layer",
        neurons: 256,
        activation: 0.4 + Math.random() * 0.55,
        gradient: 0.15 + Math.random() * 0.25,
      },
      {
        layer: "Output Layer",
        neurons: 64,
        activation: 0.3 + Math.random() * 0.65,
        gradient: 0.2 + Math.random() * 0.3,
      },
    ]

    // Generate prediction horizons
    const predictionHorizons = [
      {
        timeframe: "1 Hour",
        prediction: (Math.random() - 0.5) * 4, // -2% to +2%
        confidence: 85 + Math.random() * 10,
        volatility: 1 + Math.random() * 3,
      },
      {
        timeframe: "1 Day",
        prediction: (Math.random() - 0.5) * 8, // -4% to +4%
        confidence: 80 + Math.random() * 15,
        volatility: 2 + Math.random() * 5,
      },
      {
        timeframe: "1 Week",
        prediction: (Math.random() - 0.5) * 15, // -7.5% to +7.5%
        confidence: 75 + Math.random() * 20,
        volatility: 4 + Math.random() * 8,
      },
      {
        timeframe: "1 Month",
        prediction: (Math.random() - 0.5) * 25, // -12.5% to +12.5%
        confidence: 70 + Math.random() * 25,
        volatility: 8 + Math.random() * 15,
      },
    ]

    return NextResponse.json({
      ...analysis,
      neuralNetworkLayers: neuralLayers,
      predictionHorizon: predictionHorizons,
      timestamp: new Date().toISOString(),
      modelVersion: "DeepRL-v2.4B",
      processingTime: `${(Math.random() * 500 + 200).toFixed(0)}ms`,
    })
  } catch (error) {
    console.error("Advanced market analysis error:", error)
    return NextResponse.json({ error: "Failed to perform advanced market analysis" }, { status: 500 })
  }
}
